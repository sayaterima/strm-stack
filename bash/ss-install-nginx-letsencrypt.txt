#!/bin/bash

####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/bash/ss-install-nginx-letsencrypt.txt ###################
#### path: /var/www/ss-install-nginx-letsencrypt ###################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls Lets Encrypt SSL to Nginx (idempotent) ####################################
#### module version: Nginx 1.18.x ##################################################################
#### sourced by: ss-install-nginx ##################################################################
#### bash aliases: ss install letsencrypt, ss install nginx letsencrypt ############################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED AND ON CURRENT BUILD BEFORE RUNNING SS-INSTALL ##
## ENSURE YOUR SS-CONFIG BUILD REMAINS CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

## source ss-config ##
source /var/www/ss-config

## source ss-functions ##
source /var/www/ss-functions

## BELOW THIS RELIES ON SS-CONFIG AND SS-FUNCTIONS

####################################################################################################
#### TABLE OF CONTENTS (SS-Install-Nginx-Letsencrypt) ##############################################
####################################################################################################

## this is a brief summary of the different code snippets you will find in this script ##
## each section should be commented so you understand what is being accomplished ##

## A. Touch Timestamp File
## B. Message (Begin Script)
## C. Install Letsencrypt Certificate
## D. Reset Permissions (Nginx SSL)

####################################################################################################
#### A. SS-Install-Nginx-Letsencrypt: Touch Timestamp File #########################################
####################################################################################################

## this is a dummy timestamp file that will remember the last time this script was run ##
## it can be useful for developer reference and is sometimes used by SlickStack ##

## script timestamp ##
ss_touch "${TIMESTAMP_SS_INSTALL_NGINX_LETSENCRYPT}"

####################################################################################################
#### B. SS-Install-Nginx-Letsencrypt: Message (Begin Script) #######################################
####################################################################################################

## this is a simple message that announces to the shell the purpose of this bash script ##
## it will only be noticed by sudo users who manually call ss core bash scripts ##

## echo message ##
ss_echo "${COLOR_INFO}Running ss-install-nginx-letsencrypt... ${COLOR_RESET}"

####################################################################################################
#### C. SS-Install-Nginx-Letsencrypt: Install Letsencrypt Certificate ##############################
####################################################################################################

## here we update the Nginx config files to activate either OpenSSL or Lets Encrypt SSL ##
## this depends on your ss-config settings (both certs should exist regardless) ##

## retrieve Lets Encrypt and OpenSSL sub-config file ##
ss_wget_slowest /tmp/letsencrypt.conf "${MIRROR_LETSENCRYPT_CONF}"

## SEARCH AND REPLACE SSL SETTINGS ## 

## SSL protocols ##
if [[ -z "$SSL_PROTOCOLS" ]]; then 
    sed -i "s/@SSL_PROTOCOLS/TLSv1.2 TLSv1.3/g" /tmp/letsencrypt.conf
else 
    sed -i "s/@SSL_PROTOCOLS/${SSL_PROTOCOLS}/g" /tmp/letsencrypt.conf
fi

## SSL ciphers ##
if [[ -z "$SSL_CIPHERS" ]]; then 
    sed -i "s/@SSL_CIPHERS/ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384/g" /tmp/letsencrypt.conf
else 
    sed -i "s/@SSL_CIPHERS/${SSL_CIPHERS}/g" /tmp/letsencrypt.conf
fi

## SSL session timeout ##
if [[ -z "$SSL_SESSION_TIMEOUT" ]]; then 
    sed -i "s/@SSL_SESSION_TIMEOUT/1d/g" /tmp/letsencrypt.conf
else 
    sed -i "s/@SSL_SESSION_TIMEOUT/${SSL_SESSION_TIMEOUT}/g" /tmp/letsencrypt.conf
fi

## SSL session cache ##
if [[ -z "$SSL_SESSION_CACHE" ]]; then 
    sed -i "s/@SSL_SESSION_CACHE/shared:SSL:64m/g" /tmp/letsencrypt.conf
else 
    sed -i "s/@SSL_SESSION_CACHE/${SSL_SESSION_CACHE}/g" /tmp/letsencrypt.conf
fi

## SSL buffer size ##
if [[ -z "$SSL_BUFFER_SIZE" ]]; then 
    sed -i "s/@SSL_BUFFER_SIZE/16k/g" /tmp/letsencrypt.conf
else 
    sed -i "s/@SSL_BUFFER_SIZE/${SSL_BUFFER_SIZE}/g" /tmp/letsencrypt.conf
fi

## here we modify the live Nginx configuration files to activate Lets Encrypt certificates ##
## this snippet will only be executed if Lets Encrypt certs appear to be successful ##

## install LE config and cleanup ##
ss_cp /tmp/letsencrypt.conf /etc/nginx/conf.d/letsencrypt.conf
ss_rm /etc/nginx/conf.d/openssl.conf*

####################################################################################################
#### D. SS-Install-Nginx-Letsencrypt: Reset Permissions (Nginx SSL) ################################
####################################################################################################

## run ss-perms-nginx-ssl ##
source "${PATH_SS_PERMS_NGINX_SSL}"

####################################################################################################
#### PLACEHOLDER: Reset Permissions (SlickStack Scripts) ###########################################
####################################################################################################

## we include this permissions reset in all cron jobs and bash scripts for redundancy ##
## chmod 0700 means only the root/sudo users can execute any SlickStack scripts ##

## THIS SNIPPET DOES NOT RELY ON SS-CONFIG OR SS-FUNCTIONS
## SNIPPET: ss bash scripts, ss cron jobs
## UPDATED: 02JUL2022

chown root:root /var/www/ss* ## must be root:root
chown root:root /var/www/crons/*cron* ## must be root:root
chown root:root /var/www/crons/custom/*cron* ## must be root:root
chmod 0700 /var/www/ss* ## 0700 means only root/sudo can execute
chmod 0700 /var/www/crons/*cron* ## 0700 means only root/sudo can execute
chmod 0700 /var/www/crons/custom/*cron* ## 0700 means only root/sudo can execute

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://github.com/littlebizzy/slickstack/blob/master/ss-install-nginx-config.txt
## Ref: https://github.com/littlebizzy/slickstack/blob/master/ss-encrypt-openssl.txt
## Ref: https://github.com/littlebizzy/slickstack/blob/master/ss-encrypt-certbot.txt

## SS_EOF
